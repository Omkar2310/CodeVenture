{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/media/sky/G/webdev/omweb/src/components/imageSlider/imageslid.components.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { FaArrowAltCircleLeft, FaArrowAltCircleRight } from 'react-icons/fa';\nimport { SliderData } from './imageData';\nimport './imageSlider.styles.css';\n\nconst ImageSlider = () => {\n  _s();\n\n  const slides = SliderData; // const [current,setCurrent] = useState(0)\n  // const length = slides.length    \n  // const nextSlide = () => {\n  //     setCurrent(current === length - 1 ? 0 : current + 1);\n  //   };\n  //   const prevSlide = () => {\n  //     setCurrent(current === 0 ? length - 1 : current - 1);\n  //   };\n  //   const \n  //   if (!Array.isArray(slides) || slides.length <= 0) {\n  //     return null;\n  //   }\n\n  const [curr, setCurr] = React.useState(0);\n  const {\n    length\n  } = slides;\n\n  const goToNext = () => {\n    // Check if we've reached the final slide in the array\n    // If so, go back to 0, else curr + 1\n    setCurr(curr === length - 1 ? 0 : curr + 1);\n  }; // useEffect will run at every re-render\n\n\n  React.useEffect(() => {\n    // At every render, set a new timeout to go to the next slide\n    setTimeout(goToNext, 2000); // And, when unmounting <Slider />, clear the timeout\n    // See the reactjs.org docs on hooks for more info\n\n    return function () {\n      clearTimeout(goToNext);\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"slider\",\n    children: [/*#__PURE__*/_jsxDEV(FaArrowAltCircleLeft, {\n      className: \"left-arrow\",\n      onClick: prevSlide\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(FaArrowAltCircleRight, {\n      className: \"right-arrow\",\n      onClick: nextSlide\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this), SliderData.map((slide, index) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: index === current ? 'slide active' : 'slide',\n        children: index === current && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: slide.image,\n          alt: \"\",\n          className: \"image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 12\n  }, this);\n};\n\n_s(ImageSlider, \"gWXkG9yR6KANghhymC7ZEtLY3KY=\");\n\n_c = ImageSlider;\nexport default ImageSlider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ImageSlider\");","map":{"version":3,"sources":["/media/sky/G/webdev/omweb/src/components/imageSlider/imageslid.components.jsx"],"names":["React","useState","FaArrowAltCircleLeft","FaArrowAltCircleRight","SliderData","ImageSlider","slides","curr","setCurr","length","goToNext","useEffect","setTimeout","clearTimeout","prevSlide","nextSlide","map","slide","index","current","image"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAcC,QAAd,QAA6B,OAA7B;AACA,SAAQC,oBAAR,EAA6BC,qBAA7B,QAAyD,gBAAzD;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA,OAAO,0BAAP;;AACA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACtB,QAAMC,MAAM,GAAGF,UAAf,CADsB,CAEtB;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;;AAEF,QAAM,CAACG,IAAD,EAAOC,OAAP,IAAkBR,KAAK,CAACC,QAAN,CAAe,CAAf,CAAxB;AACA,QAAM;AAAEQ,IAAAA;AAAF,MAAaH,MAAnB;;AAEA,QAAMI,QAAQ,GAAG,MAAM;AACrB;AACA;AACAF,IAAAA,OAAO,CAACD,IAAI,KAAKE,MAAM,GAAG,CAAlB,GAAsB,CAAtB,GAA0BF,IAAI,GAAG,CAAlC,CAAP;AACD,GAJD,CAtBwB,CA4BxB;;;AACAP,EAAAA,KAAK,CAACW,SAAN,CAAgB,MAAM;AACpB;AACAC,IAAAA,UAAU,CAACF,QAAD,EAAW,IAAX,CAAV,CAFoB,CAGpB;AACA;;AACA,WAAO,YAAW;AAChBG,MAAAA,YAAY,CAACH,QAAD,CAAZ;AACD,KAFD;AAGD,GARD;AAUE,sBACO;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA,4BACH,QAAC,oBAAD;AAAsB,MAAA,SAAS,EAAC,YAAhC;AAA6C,MAAA,OAAO,EAAEI;AAAtD;AAAA;AAAA;AAAA;AAAA,YADG,eAEH,QAAC,qBAAD;AAAuB,MAAA,SAAS,EAAC,aAAjC;AAA+C,MAAA,OAAO,EAAEC;AAAxD;AAAA;AAAA;AAAA;AAAA,YAFG,EAGFX,UAAU,CAACY,GAAX,CAAe,CAACC,KAAD,EAAOC,KAAP,KAAiB;AAC7B,0BACI;AACI,QAAA,SAAS,EAAEA,KAAK,KAAKC,OAAV,GAAoB,cAApB,GAAqC,OADpD;AAAA,kBAICD,KAAK,KAAKC,OAAV,iBACG;AAAK,UAAA,GAAG,EAAEF,KAAK,CAACG,KAAhB;AAAuB,UAAA,GAAG,EAAC,EAA3B;AAA8B,UAAA,SAAS,EAAC;AAAxC;AAAA;AAAA;AAAA;AAAA;AALJ,SAESF,KAFT;AAAA;AAAA;AAAA;AAAA,cADJ;AAUH,KAXA,CAHE;AAAA;AAAA;AAAA;AAAA;AAAA,UADP;AAoBH,CA3DD;;GAAMb,W;;KAAAA,W;AA6DN,eAAeA,WAAf","sourcesContent":["import React,{useState} from 'react'\nimport {FaArrowAltCircleLeft,FaArrowAltCircleRight} from 'react-icons/fa';\nimport { SliderData } from './imageData';\nimport './imageSlider.styles.css'\nconst ImageSlider = () => {\n    const slides = SliderData\n    // const [current,setCurrent] = useState(0)\n    // const length = slides.length    \n\n    // const nextSlide = () => {\n    //     setCurrent(current === length - 1 ? 0 : current + 1);\n    //   };\n    \n    //   const prevSlide = () => {\n    //     setCurrent(current === 0 ? length - 1 : current - 1);\n    //   };\n      \n    //   const \n\n    //   if (!Array.isArray(slides) || slides.length <= 0) {\n    //     return null;\n    //   }\n\n  const [curr, setCurr] = React.useState(0);\n  const { length } = slides;\n  \n  const goToNext = () => {\n    // Check if we've reached the final slide in the array\n    // If so, go back to 0, else curr + 1\n    setCurr(curr === length - 1 ? 0 : curr + 1);\n  }\n  \n  // useEffect will run at every re-render\n  React.useEffect(() => {\n    // At every render, set a new timeout to go to the next slide\n    setTimeout(goToNext, 2000);\n    // And, when unmounting <Slider />, clear the timeout\n    // See the reactjs.org docs on hooks for more info\n    return function() {\n      clearTimeout(goToNext);\n    }\n  })\n\n    return (\n           <div className='slider'>\n        <FaArrowAltCircleLeft className='left-arrow' onClick={prevSlide} />\n        <FaArrowAltCircleRight className='right-arrow' onClick={nextSlide} />\n        {SliderData.map((slide,index) => {\n            return (\n                <div\n                    className={index === current ? 'slide active' : 'slide'}\n                    key={index}\n                >\n                {index === current && (\n                    <img src={slide.image} alt='' className='image' />\n                )}\n                </div>\n            );\n        })\n\n        }\n    </div>\n    );\n};\n\nexport default ImageSlider;\n"]},"metadata":{},"sourceType":"module"}